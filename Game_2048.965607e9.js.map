{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        // eslint-disable-next-line no-console\n        console.log(initialState);\n    }\n    moveRight() {\n        this.moveHorizontally(\"right\");\n    }\n    moveLeft() {\n        this.moveHorizontally(\"left\");\n    }\n    moveUp() {\n        this.moveVertically(\"up\");\n    }\n    moveDown() {\n        this.moveVertically(\"down\");\n    }\n    /**\n   * @returns {number}\n   */ getScore(num) {\n        const score = document.querySelector(\".game-score\");\n        const currentScore = parseInt(score.innerHTML) || 0;\n        score.innerHTML = currentScore + num;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        const tbody = document.querySelector(\"tbody\");\n        const rows = tbody.rows;\n        const table = [];\n        for(let i = 0; i < rows.length; i++){\n            table[i] = [];\n            for(let j = 0; j < rows[i].cells.length; j++){\n                const cell = rows[i].cells[j];\n                table[i].push(parseInt(cell.innerHTML) || 0);\n            }\n        }\n        return table;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        if (this.hasWon()) return \"win\";\n        if (this.hasLose()) return \"lose\";\n        if (this.isPlaying()) return \"playing\";\n        if (this.isIdle()) return \"idle\";\n    }\n    setStatus(newStatus) {\n        return newStatus;\n    }\n    hasWon() {\n        const tbody = document.querySelector(\"tbody\");\n        const rows = tbody.rows;\n        for(let i = 0; i < rows.length; i++){\n            const cells = rows[i].cells;\n            for(let j = 0; j < cells.length; j++){\n                if (parseInt(cells[j].innerHTML) === 2048) return true;\n            }\n        }\n        return false;\n    }\n    hasLose() {\n        const tbody = document.querySelector(\"tbody\");\n        const rows = tbody.rows;\n        const table = [];\n        for(let i = 0; i < rows.length; i++){\n            table[i] = [];\n            const cells = rows[i].cells;\n            for(let j = 0; j < cells.length; j++)table[i][j] = parseInt(cells[j].innerHTML) || 0;\n        }\n        for(let i = 0; i < table.length; i++)for(let j = 0; j < table[i].length; j++){\n            if (table[i][j] === 0) return false;\n        }\n        for(let i = 0; i < table.length; i++)for(let j = 0; j < table[i].length - 1; j++){\n            if (table[i][j] === table[i][j + 1]) return false;\n        }\n        for(let i = 0; i < table.length - 1; i++)for(let j = 0; j < table.length - 1; j++){\n            if (table[i][j] === table[i + 1][j]) return false;\n        }\n        return true;\n    }\n    isIdle() {\n        const tdElements = document.querySelectorAll(\"tbody td\");\n        for(let i = 0; i < tdElements.length; i++){\n            if (parseInt(tdElements[i].innerHTML) > 0) return false;\n        }\n        return true;\n    }\n    isPlaying() {\n        const idle = this.isIdle();\n        const lose = this.hasLose();\n        const win = this.hasWon();\n        if (!idle && !lose && !win) return true;\n        return false;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        const startButton = document.querySelector(\".button.start\");\n        startButton.classList.add(\"restart\");\n        startButton.classList.remove(\"start\");\n        startButton.textContent = \"Restart\";\n        const tdElements = document.querySelectorAll(\".field-cell\");\n        const tdArray = Array.from(tdElements);\n        let firstElement, secondElement;\n        let uniqueElements = new Set();\n        while(uniqueElements.size !== 2){\n            firstElement = tdArray[$a5fd07fa01589658$var$getRandomInt(tdArray.length)];\n            secondElement = tdArray[$a5fd07fa01589658$var$getRandomInt(tdArray.length)];\n            uniqueElements = new Set([\n                firstElement,\n                secondElement\n            ]);\n        }\n        if (uniqueElements.size === 2) {\n            firstElement.classList.add(\"field-cell--2\");\n            firstElement.innerHTML = \"2\";\n            secondElement.classList.add(\"field-cell--2\");\n            secondElement.innerHTML = \"2\";\n        }\n        const startMessage = document.querySelector(\".message-start\");\n        if (startMessage) startMessage.remove();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        const restartButton = document.querySelector(\".button.restart\");\n        restartButton.classList.remove(\"restart\");\n        restartButton.classList.add(\"start\");\n        restartButton.textContent = \"Start\";\n        const tdElements = document.querySelectorAll(\".field-cell\");\n        const tdArray = Array.from(tdElements);\n        tdArray.forEach((element)=>{\n            element.className = \"field-cell\";\n            element.innerHTML = \"\";\n        });\n        const loseWindow = document.querySelector(\".lose-window\");\n        if (loseWindow) loseWindow.remove();\n        const winWindow = document.querySelector(\".win-window\");\n        if (winWindow) winWindow.remove();\n        const score = document.querySelector(\".game-score\");\n        if (score) score.innerHTML = \"0\";\n        this.setStatus(\"playing\");\n        const startMessage = document.createElement(\"p\");\n        startMessage.className = \"message message-start\";\n        startMessage.innerHTML = 'Press \"Start\" to begin game. Good luck!';\n        const messageContainer = document.querySelector(\".message-container\");\n        messageContainer.appendChild(startMessage);\n    }\n    // Add your own methods here\n    addNewCell() {\n        const tdElements = document.querySelectorAll(\"tbody td\");\n        const emptyCells = Array.from(tdElements).filter((cell)=>cell.textContent.trim() === \"\");\n        if (emptyCells.length > 0) {\n            const newElement = emptyCells[$a5fd07fa01589658$var$getRandomInt(emptyCells.length)];\n            const randomNumber = $a5fd07fa01589658$var$getRandomInt(2);\n            if (randomNumber === 0) {\n                newElement.innerHTML = \"2\";\n                newElement.classList.add(\"field-cell--2\");\n            } else if (randomNumber === 1) {\n                newElement.innerHTML = \"4\";\n                newElement.classList.add(\"field-cell--4\");\n            }\n        }\n    }\n    moveHorizontally(direction) {\n        const table = this.getState();\n        const newTable = [];\n        const tbody = document.querySelector(\"tbody\");\n        const rows = tbody.rows;\n        let totalScore = 0;\n        let tableChanged = false;\n        for(let i = 0; i < table.length; i++){\n            let row = table[i].slice();\n            const originalRow = [\n                ...row\n            ];\n            row = row.filter((val)=>val > 0);\n            for(let k = 0; k < row.length - 1; k++)if (row[k] === row[k + 1]) {\n                row[k] *= 2;\n                totalScore += row[k];\n                tableChanged = true;\n                row[k + 1] = 0;\n            }\n            row = row.filter((val)=>val > 0);\n            while(row.length !== 4){\n                if (direction === \"right\") row.unshift(0);\n                else if (direction === \"left\") row.push(0);\n            }\n            newTable.push(row);\n            if (!$a5fd07fa01589658$var$arraysEqual(originalRow, row)) tableChanged = true;\n        }\n        for(let i = 0; i < newTable.length; i++)for(let j = 0; j < newTable[i].length; j++){\n            rows[i].cells[j].innerHTML = newTable[i][j] > 0 ? `${newTable[i][j]}` : \"\";\n            rows[i].cells[j].className = \"field-cell\";\n            if (newTable[i][j] > 0) rows[i].cells[j].classList.add(`field-cell--${newTable[i][j]}`);\n        }\n        this.getScore(totalScore);\n        if (tableChanged) this.addNewCell();\n    }\n    moveVertically(direction) {\n        const table = this.getState();\n        const newTable = [];\n        const tbody = document.querySelector(\"tbody\");\n        const rows = tbody.rows;\n        let totalScore = 0;\n        let tableChanged = false;\n        for(let i = 0; i < table[0].length; i++){\n            let cell = [];\n            for(let j = 0; j < table.length; j++)cell.push(table[j][i]);\n            cell = cell.slice();\n            const originalCell = [\n                ...cell\n            ];\n            cell = cell.filter((val)=>val > 0);\n            for(let k = 0; k < cell.length - 1; k++)if (cell[k] === cell[k + 1]) {\n                cell[k] *= 2;\n                totalScore += cell[k];\n                tableChanged = true;\n                cell[k + 1] = 0;\n            }\n            cell = cell.filter((val)=>val > 0);\n            while(cell.length !== 4){\n                if (direction === \"down\") cell.unshift(0);\n                else if (direction === \"up\") cell.push(0);\n            }\n            for(let j = 0; j < table.length; j++){\n                newTable[j] = newTable[j] || [];\n                newTable[j][i] = cell[j];\n            }\n            if (!$a5fd07fa01589658$var$arraysEqual(originalCell, cell)) tableChanged = true;\n        }\n        for(let i = 0; i < newTable.length; i++)for(let j = 0; j < newTable[i].length; j++){\n            rows[i].cells[j].innerHTML = newTable[i][j] > 0 ? `${newTable[i][j]}` : \"\";\n            rows[i].cells[j].className = \"field-cell\";\n            if (newTable[i][j] > 0) rows[i].cells[j].classList.add(`field-cell--${newTable[i][j]}`);\n        }\n        this.getScore(totalScore);\n        if (tableChanged) this.addNewCell();\n    }\n    loseWindow() {\n        const loseWindow = document.createElement(\"div\");\n        loseWindow.className = \"lose-window\";\n        const title = document.createElement(\"h2\");\n        title.textContent = \"You lose! Try again.\";\n        loseWindow.appendChild(title);\n        document.body.appendChild(loseWindow);\n    }\n    winWindow() {\n        const winWindow = document.createElement(\"div\");\n        winWindow.className = \"win-window\";\n        const title = document.createElement(\"h2\");\n        title.textContent = \"You won! Congratulation!.\";\n        winWindow.appendChild(title);\n        document.body.appendChild(winWindow);\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\nfunction $a5fd07fa01589658$var$getRandomInt(num) {\n    return Math.floor(Math.random() * num);\n}\nfunction $a5fd07fa01589658$var$arraysEqual(arr1, arr2) {\n    return arr1.length === arr2.length && arr1.every((val, index)=>val === arr2[index]);\n}\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n// Write your code here\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\nif ($09e991522ca7e64e$var$button) $09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$button.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$game.setStatus(\"playing\");\n        $09e991522ca7e64e$var$startGameLoop();\n    } else if ($09e991522ca7e64e$var$button.classList.contains(\"restart\")) {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$game.setStatus(\"idle\");\n        $09e991522ca7e64e$var$startGameLoop();\n    }\n});\nlet $09e991522ca7e64e$var$gameLoop;\nfunction $09e991522ca7e64e$var$startGameLoop() {\n    clearInterval($09e991522ca7e64e$var$gameLoop);\n    $09e991522ca7e64e$var$gameLoop = setInterval(()=>{\n        const newStatus = $09e991522ca7e64e$var$game.getStatus();\n        if (newStatus === \"win\") {\n            $09e991522ca7e64e$var$game.winWindow();\n            clearInterval($09e991522ca7e64e$var$gameLoop);\n        } else if (newStatus === \"lose\") {\n            $09e991522ca7e64e$var$game.loseWindow();\n            clearInterval($09e991522ca7e64e$var$gameLoop);\n        }\n    }, 100);\n}\ndocument.addEventListener(\"keydown\", (eve)=>{\n    if (!$09e991522ca7e64e$var$game.isPlaying()) return;\n    if (eve.key === \"ArrowLeft\") $09e991522ca7e64e$var$game.moveLeft();\n    else if (eve.key === \"ArrowRight\") $09e991522ca7e64e$var$game.moveRight();\n    else if (eve.key === \"ArrowUp\") $09e991522ca7e64e$var$game.moveUp();\n    else if (eve.key === \"ArrowDown\") $09e991522ca7e64e$var$game.moveDown();\n});\n\n\n//# sourceMappingURL=Game_2048.965607e9.js.map\n","\"use strict\";\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require(\"../modules/Game.class\");\nconst game = new Game();\n\n// Write your code here\n\nconst button = document.querySelector(\".button\");\n\nif (button) {\n  button.addEventListener(\"click\", () => {\n    if (button.classList.contains(\"start\")) {\n      game.start();\n      game.setStatus(\"playing\");\n      startGameLoop();\n    } else if (button.classList.contains(\"restart\")) {\n      game.restart();\n      game.setStatus(\"idle\");\n      startGameLoop();\n    }\n  });\n}\n\nlet gameLoop;\n\nfunction startGameLoop() {\n  clearInterval(gameLoop);\n\n  gameLoop = setInterval(() => {\n    const newStatus = game.getStatus();\n\n    if (newStatus === \"win\") {\n      game.winWindow();\n      clearInterval(gameLoop);\n    } else if (newStatus === \"lose\") {\n      game.loseWindow();\n      clearInterval(gameLoop);\n    }\n  }, 100);\n}\n\ndocument.addEventListener(\"keydown\", (eve) => {\n  if (!game.isPlaying()) {\n    return;\n  }\n\n  if (eve.key === \"ArrowLeft\") {\n    game.moveLeft();\n  } else if (eve.key === \"ArrowRight\") {\n    game.moveRight();\n  } else if (eve.key === \"ArrowUp\") {\n    game.moveUp();\n  } else if (eve.key === \"ArrowDown\") {\n    game.moveDown();\n  }\n});\n","\"use strict\";\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    // eslint-disable-next-line no-console\n    console.log(initialState);\n  }\n\n  moveRight() {\n    this.moveHorizontally(\"right\");\n  }\n\n  moveLeft() {\n    this.moveHorizontally(\"left\");\n  }\n\n  moveUp() {\n    this.moveVertically(\"up\");\n  }\n\n  moveDown() {\n    this.moveVertically(\"down\");\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore(num) {\n    const score = document.querySelector(\".game-score\");\n    const currentScore = parseInt(score.innerHTML) || 0;\n\n    score.innerHTML = currentScore + num;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    const tbody = document.querySelector(\"tbody\");\n    const rows = tbody.rows;\n    const table = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      table[i] = [];\n\n      for (let j = 0; j < rows[i].cells.length; j++) {\n        const cell = rows[i].cells[j];\n\n        table[i].push(parseInt(cell.innerHTML) || 0);\n      }\n    }\n\n    return table;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    if (this.hasWon()) {\n      return \"win\";\n    }\n\n    if (this.hasLose()) {\n      return \"lose\";\n    }\n\n    if (this.isPlaying()) {\n      return \"playing\";\n    }\n\n    if (this.isIdle()) {\n      return \"idle\";\n    }\n  }\n\n  setStatus(newStatus) {\n    return newStatus;\n  }\n\n  hasWon() {\n    const tbody = document.querySelector(\"tbody\");\n    const rows = tbody.rows;\n\n    for (let i = 0; i < rows.length; i++) {\n      const cells = rows[i].cells;\n\n      for (let j = 0; j < cells.length; j++) {\n        if (parseInt(cells[j].innerHTML) === 2048) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  hasLose() {\n    const tbody = document.querySelector(\"tbody\");\n    const rows = tbody.rows;\n    const table = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      table[i] = [];\n\n      const cells = rows[i].cells;\n\n      for (let j = 0; j < cells.length; j++) {\n        table[i][j] = parseInt(cells[j].innerHTML) || 0;\n      }\n    }\n\n    for (let i = 0; i < table.length; i++) {\n      for (let j = 0; j < table[i].length; j++) {\n        if (table[i][j] === 0) {\n          return false;\n        }\n      }\n    }\n\n    for (let i = 0; i < table.length; i++) {\n      for (let j = 0; j < table[i].length - 1; j++) {\n        if (table[i][j] === table[i][j + 1]) {\n          return false;\n        }\n      }\n    }\n\n    for (let i = 0; i < table.length - 1; i++) {\n      for (let j = 0; j < table.length - 1; j++) {\n        if (table[i][j] === table[i + 1][j]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  isIdle() {\n    const tdElements = document.querySelectorAll(\"tbody td\");\n\n    for (let i = 0; i < tdElements.length; i++) {\n      if (parseInt(tdElements[i].innerHTML) > 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  isPlaying() {\n    const idle = this.isIdle();\n    const lose = this.hasLose();\n    const win = this.hasWon();\n\n    if (!idle && !lose && !win) {\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Starts the game.\n   */\n  start() {\n    const startButton = document.querySelector(\".button.start\");\n\n    startButton.classList.add(\"restart\");\n    startButton.classList.remove(\"start\");\n    startButton.textContent = \"Restart\";\n\n    const tdElements = document.querySelectorAll(\".field-cell\");\n    const tdArray = Array.from(tdElements);\n    let firstElement, secondElement;\n    let uniqueElements = new Set();\n\n    while (uniqueElements.size !== 2) {\n      firstElement = tdArray[getRandomInt(tdArray.length)];\n      secondElement = tdArray[getRandomInt(tdArray.length)];\n      uniqueElements = new Set([firstElement, secondElement]);\n    }\n\n    if (uniqueElements.size === 2) {\n      firstElement.classList.add(\"field-cell--2\");\n      firstElement.innerHTML = \"2\";\n      secondElement.classList.add(\"field-cell--2\");\n      secondElement.innerHTML = \"2\";\n    }\n\n    const startMessage = document.querySelector(\".message-start\");\n\n    if (startMessage) {\n      startMessage.remove();\n    }\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    const restartButton = document.querySelector(\".button.restart\");\n\n    restartButton.classList.remove(\"restart\");\n    restartButton.classList.add(\"start\");\n\n    restartButton.textContent = \"Start\";\n\n    const tdElements = document.querySelectorAll(\".field-cell\");\n    const tdArray = Array.from(tdElements);\n\n    tdArray.forEach((element) => {\n      element.className = \"field-cell\";\n      element.innerHTML = \"\";\n    });\n\n    const loseWindow = document.querySelector(\".lose-window\");\n\n    if (loseWindow) {\n      loseWindow.remove();\n    }\n\n    const winWindow = document.querySelector(\".win-window\");\n\n    if (winWindow) {\n      winWindow.remove();\n    }\n\n    const score = document.querySelector(\".game-score\");\n\n    if (score) {\n      score.innerHTML = \"0\";\n    }\n\n    this.setStatus(\"playing\");\n\n    const startMessage = document.createElement(\"p\");\n\n    startMessage.className = \"message message-start\";\n    startMessage.innerHTML = 'Press \"Start\" to begin game. Good luck!';\n\n    const messageContainer = document.querySelector(\".message-container\");\n\n    messageContainer.appendChild(startMessage);\n  }\n\n  // Add your own methods here\n  addNewCell() {\n    const tdElements = document.querySelectorAll(\"tbody td\");\n    const emptyCells = Array.from(tdElements).filter(\n      (cell) => cell.textContent.trim() === \"\",\n    );\n\n    if (emptyCells.length > 0) {\n      const newElement = emptyCells[getRandomInt(emptyCells.length)];\n      const randomNumber = getRandomInt(2);\n\n      if (randomNumber === 0) {\n        newElement.innerHTML = \"2\";\n        newElement.classList.add(\"field-cell--2\");\n      } else if (randomNumber === 1) {\n        newElement.innerHTML = \"4\";\n        newElement.classList.add(\"field-cell--4\");\n      }\n    }\n  }\n\n  moveHorizontally(direction) {\n    const table = this.getState();\n    const newTable = [];\n\n    const tbody = document.querySelector(\"tbody\");\n    const rows = tbody.rows;\n    let totalScore = 0;\n    let tableChanged = false;\n\n    for (let i = 0; i < table.length; i++) {\n      let row = table[i].slice();\n      const originalRow = [...row];\n\n      row = row.filter((val) => val > 0);\n\n      for (let k = 0; k < row.length - 1; k++) {\n        if (row[k] === row[k + 1]) {\n          row[k] *= 2;\n          totalScore += row[k];\n          tableChanged = true;\n          row[k + 1] = 0;\n        }\n      }\n      row = row.filter((val) => val > 0);\n\n      while (row.length !== 4) {\n        if (direction === \"right\") {\n          row.unshift(0);\n        } else if (direction === \"left\") {\n          row.push(0);\n        }\n      }\n      newTable.push(row);\n\n      if (!arraysEqual(originalRow, row)) {\n        tableChanged = true;\n      }\n    }\n\n    for (let i = 0; i < newTable.length; i++) {\n      for (let j = 0; j < newTable[i].length; j++) {\n        rows[i].cells[j].innerHTML =\n          newTable[i][j] > 0 ? `${newTable[i][j]}` : \"\";\n        rows[i].cells[j].className = \"field-cell\";\n\n        if (newTable[i][j] > 0) {\n          rows[i].cells[j].classList.add(`field-cell--${newTable[i][j]}`);\n        }\n      }\n    }\n    this.getScore(totalScore);\n\n    if (tableChanged) {\n      this.addNewCell();\n    }\n  }\n\n  moveVertically(direction) {\n    const table = this.getState();\n    const newTable = [];\n\n    const tbody = document.querySelector(\"tbody\");\n    const rows = tbody.rows;\n    let totalScore = 0;\n    let tableChanged = false;\n\n    for (let i = 0; i < table[0].length; i++) {\n      let cell = [];\n\n      for (let j = 0; j < table.length; j++) {\n        cell.push(table[j][i]);\n      }\n\n      cell = cell.slice();\n\n      const originalCell = [...cell];\n\n      cell = cell.filter((val) => val > 0);\n\n      for (let k = 0; k < cell.length - 1; k++) {\n        if (cell[k] === cell[k + 1]) {\n          cell[k] *= 2;\n          totalScore += cell[k];\n          tableChanged = true;\n          cell[k + 1] = 0;\n        }\n      }\n\n      cell = cell.filter((val) => val > 0);\n\n      while (cell.length !== 4) {\n        if (direction === \"down\") {\n          cell.unshift(0);\n        } else if (direction === \"up\") {\n          cell.push(0);\n        }\n      }\n\n      for (let j = 0; j < table.length; j++) {\n        newTable[j] = newTable[j] || [];\n        newTable[j][i] = cell[j];\n      }\n\n      if (!arraysEqual(originalCell, cell)) {\n        tableChanged = true;\n      }\n    }\n\n    for (let i = 0; i < newTable.length; i++) {\n      for (let j = 0; j < newTable[i].length; j++) {\n        rows[i].cells[j].innerHTML =\n          newTable[i][j] > 0 ? `${newTable[i][j]}` : \"\";\n        rows[i].cells[j].className = \"field-cell\";\n\n        if (newTable[i][j] > 0) {\n          rows[i].cells[j].classList.add(`field-cell--${newTable[i][j]}`);\n        }\n      }\n    }\n    this.getScore(totalScore);\n\n    if (tableChanged) {\n      this.addNewCell();\n    }\n  }\n\n  loseWindow() {\n    const loseWindow = document.createElement(\"div\");\n\n    loseWindow.className = \"lose-window\";\n\n    const title = document.createElement(\"h2\");\n\n    title.textContent = \"You lose! Try again.\";\n    loseWindow.appendChild(title);\n    document.body.appendChild(loseWindow);\n  }\n\n  winWindow() {\n    const winWindow = document.createElement(\"div\");\n\n    winWindow.className = \"win-window\";\n\n    const title = document.createElement(\"h2\");\n\n    title.textContent = \"You won! Congratulation!.\";\n    winWindow.appendChild(title);\n    document.body.appendChild(winWindow);\n  }\n}\n\nmodule.exports = Game;\n\nfunction getRandomInt(num) {\n  return Math.floor(Math.random() * num);\n}\n\nfunction arraysEqual(arr1, arr2) {\n  return (\n    arr1.length === arr2.length &&\n    arr1.every((val, index) => val === arr2[index])\n  );\n}\n"],"names":["$09e991522ca7e64e$var$gameLoop","$a5fd07fa01589658$var$getRandomInt","num","Math","floor","random","$a5fd07fa01589658$var$arraysEqual","arr1","arr2","length","every","val","index","$09e991522ca7e64e$var$game","initialState","console","log","moveRight","moveHorizontally","moveLeft","moveUp","moveVertically","moveDown","getScore","score","document","querySelector","currentScore","parseInt","innerHTML","getState","rows","tbody","table","i","j","cells","cell","push","getStatus","hasWon","hasLose","isPlaying","isIdle","setStatus","newStatus","tdElements","querySelectorAll","idle","lose","win","start","firstElement","secondElement","startButton","classList","add","remove","textContent","tdArray","Array","from","uniqueElements","Set","size","startMessage","restart","restartButton","forEach","element","className","loseWindow","winWindow","createElement","messageContainer","appendChild","addNewCell","emptyCells","filter","trim","newElement","randomNumber","direction","newTable","totalScore","tableChanged","row","slice","originalRow","k","unshift","originalCell","title","body","$09e991522ca7e64e$var$button","$09e991522ca7e64e$var$startGameLoop","clearInterval","setInterval","addEventListener","contains","eve","key"],"version":3,"file":"Game_2048.965607e9.js.map"}